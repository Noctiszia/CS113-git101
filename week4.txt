Week4
1. การนิยามฟังก์ชัน
มีรูปแบบ คือ 
return-value-type   function-name(parameter-list){
declarations
statement
statement
:
}
//ฟังก์ชันจะต้องถูกประกาศก่อน main() เพื่อให้โปรแกรมเจอฟังก์ชันก่อนจะวิ่งไปหา main()
รูปแบบของฟังก์ชัน Prototypes
parameter-list ละชื่อตัวแปรได้ แต่ละประเภทข้อมูลไม่ได้
2. Call by Value
ในการเรียกใช้ฟังก์ชัน ภาษา C จะส่งผ่านค่าข้อมูลจากผู้เรียกไปยังฟังก์ชันที่ถูกเรียก มีลักษณะที่เรียกว่า pass by value  //การส่งผ่านค่านี้ ฟังก์ชันที่ถูกเรียกจะเก็บค่าข้อมูลที่ผ่านเข้ามาในฟังก์ชันไว้ในตัวแปรชั่วคราว(การส่งผ่านเป็นเพียงการส่งค่าข้อมูลจากผู้เรียก)
3. Standard Library Functions and Math Library Functions
ฟังก์ชัน printf, scanf, getchar เป็นตัวอย่าง Standard Library Functions
ฟังก์ชัน sqrt, exp, log เป็นตัวอย่าง Math Library Functions  //เวลาคอมไพล์โปรแกรม จำเป็นต้องคอมไพล์ (link) เข้ากับโค้ดไบนารีของฟังก์ชันด้วย
4. Return Value
ฟังก์ชันจะมีการส่งค่ากลับ หรือใช้ void เป็น return type เพื่อบอกโปรแกรมว่าฟังก์ชันนี้ไม่มีการส่งค่าใด ๆ กลับไปยังผู้เรียก  //ใช้ return เพื่อส่งกลับข้อมูล
ค่าที่ได้จากการเรียกใช้ฟังก์ชันหนึ่งสามารถส่งผ่านเป็นพารามิเตอร์ของการเรียกใช้อีกฟังก์ชันได้
5. Recursion
ฟังก์ชันสามารถเรียกใช้ตนเองได้ ซึ่งเรียกว่า recursion
//เมื่อเรียกใช้ตนเอง โปรแกรมจะสำเนาค่าต่าง ๆ ภายในฟังก์ชันขึ้นมาอีกชุด โดยเป็นอิสระของการเรียกก่อนหน้า เช่น
#include <stdio.h>
long  fac(long x){
       if(n == 0){ 
            return 1;
       }
       else{
            return x * fac(x – 1);
       }
}
int main(){
      long n = 6;
      printf(“%ld! = %ld\n”, n, fac(n));
}
//เมื่อฟังก์ชันถูกใช้งาน stack frames จะถูกสร้างขึ้น 1 ต่อการเรียก 1 ครั้ง เพื่อสามารถจัดการเก็บตัวแปรจำนวนมากได้
//return address เป็นตำแหน่งที่ถูกสร้างหลังฟังก์ชันทำงานเสร็จ และเมื่อเสร็จ stack frames จะถูกทำลาย
